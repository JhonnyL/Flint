{"tagline":"Enhancements to Silex with structure and conventions.","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Flint","body":"Flint\r\n=====\r\n\r\n[![Build Status](https://travis-ci.org/henrikbjorn/Flint.png?branch=master)](https://travis-ci.org/henrikbjorn/Flint)\r\n\r\nFlint is build on top of [Silex](http://silex.sensionlabs.org) and tries to bring structure, conventions and a couple of [Symfony](http://symfony.com) features.\r\n\r\nWhat is Different from Silex\r\n----------------------------\r\n\r\nNothing and everything. Everything Silex does, Flint does aswell. This means that it is fully backwards compatible. So if closures are your thing, then dont stop using does but still get some benefit.\r\n\r\n* [Twig](http://twig.sensiolabs.org) is enabled by default.\r\n* Uses the full router instead of the url matcher for more power and flexibility.\r\n* Supports using `xml|yml|php` files for router configuration.\r\n* Custom controller resolver that knows how to inject your application.\r\n* A base controller with convenient helper methods.\r\n* Custom error pages by using the default exception handler from Symfony.\r\n\r\nDocumentation\r\n-------------\r\n\r\n* [Getting started](#getting-started)\r\n* [Controllers](#controllers)\r\n* [Routing](#routing)\r\n* [Custom Error Pages](#custom-error-pages)\r\n* [Default Parameters](#default-parameters)\r\n* [Injecting Configuration Parameters](#injecting-configuration-parameters)\r\n\r\n### Getting started\r\n\r\nFor starting up a new project the easiest way is to use [Composer](http://getcomposer.org) and [Flint-Skeleton](http://github.com/henrikbjorn/flint-skeleton).\r\n\r\n``` bash\r\n$ php composer.phar create-project -s dev henrikbjorn/flint-skeleton my-flint-application\r\n```\r\n\r\nOr if you are migrating from a Silex project change your `composer.json` file to require Flint and change the Application class that is used.\r\n\r\n``` bash\r\n$ php composer.phar require henrikbjorn/flint:~1.0\r\n```\r\n\r\n``` php\r\n<?php\r\n\r\nuse Flint\\Application;\r\n\r\n$application = new Application($rootDir, $debug);\r\n```\r\n\r\nIt is recommended to subclass `Flint\\Application` instead of using the application class directly.\r\n\r\n### Controllers\r\n\r\nFlint tries to make Silex more like Symfony. And by using closures it is hard to seperate controllers in a logic way when you have more than a\r\ncouple of them. To make it better it is recommended to use classes and methods for controllers. The basics is [explained here](http://silex.sensiolabs.org/doc/usage.html#controllers-in-classes)\r\nbut Flint takes it further and allows the application to be injected into a controller.\r\n\r\nThe first way to accomplish this is by implementing `ApplicationAwareInterface` or extending `ApplicationAware`. This works exactly [as described in Symfony](http://symfony.com/doc/2.0/book/controller.html#the-base-controller-class).\r\nWith the only exception that the property is called `$app` instead of `$container`.\r\n\r\n``` php\r\n<?php\r\n\r\nnamespace Acme\\Controller;\r\n\r\nuse Flint\\ApplicationAware;\r\n\r\nclass HelloController extends ApplicationAware\r\n{\r\n    public function indexAction()\r\n    {\r\n        return $this->app['twig']->render('Hello/index.html.twig');\r\n    }\r\n}\r\n```\r\n\r\nThe other way is to use a base controller. Flint ships with one that mimics most of the one provider with Symfony. To see what methods it implements\r\ngo look at the source code for `Flint\\Controller\\Controller`.\r\n\r\n``` php\r\n<?php\r\n\r\nnamespace Acme\\Controller;\r\n\r\nuse Flint\\Controller\\Controller;\r\n\r\nclass HelloController extends Controller\r\n{\r\n    public function indexAction()\r\n    {\r\n        return $this->render('Hello/index.html.twig');\r\n    }\r\n}\r\n```\r\n\r\n### Routing\r\n\r\nBecause Flint replaces the url matcher used in Symfony with the full router implementation a lot of new things is possible.\r\n\r\nCaching is one of thoose things. It makes your application faster as it does not need to register routes on every request.\r\nTogether with loading your routes from a configuration file like Symfony it will also bring more structure to your application.\r\n\r\nTo enable caching you just need to point the router to the directory you want to use and if it should cache or not. By default the\r\n`debug` parameter will be used as to determaine if cache should be used or not.\r\n\r\n``` php\r\n<?php\r\n\r\n// .. create a $app before this line\r\n$app->inject(array(\r\n    'routing.options' => array(\r\n        'cache_dir' => '/my/cache/directory/routing',\r\n    ),\r\n));\r\n```\r\n\r\nBefore it is possible to use the full power of caching it is needed to use configuration files because Silex will always call\r\nadd routes via its convenience methods `get|post|delete|put`. Furtunately this is baked right in.\r\n\r\n``` php\r\n<?php\r\n\r\n// .. create $app\r\n$app->inject(array(\r\n    'routing.resource' => 'config/routing.xml',\r\n));\r\n```\r\n\r\n``` xml\r\n<!-- config/routing.xml -->\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<routes xmlns=\"http://symfony.com/schema/routing\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"http://symfony.com/schema/routing http://symfony.com/schema/routing/routing-1.0.xsd\">\r\n\r\n    <route id=\"homepage\" pattern=\"/\">\r\n        <default key=\"_controller\">Acme\\\\Controller\\\\DefaultController::indexAction</default>\r\n    </route>\r\n</routes>\r\n```\r\n\r\nThis will make the router load that resource by default. Here xml is used as an example but `php` is also supported together with\r\n`yml` if `Symfony\\Component\\Yaml\\Yaml` is autoloadable.\r\n\r\nThe benefit from doing it this way is of course they can be cached but also it allows you to import routing files that are included\r\nin libraries and even other Symfony bundles such as the [WebProfilerBundle](https://github.com/symfony/webprofilerbundle). Also it will make it easier to generate routes from\r\ninside your views.\r\n\r\n``` jinja\r\n<a href=\"{{ app.router.generate('homepage') }}\">Homepage</a>\r\n```\r\n\r\nThis is also possible with Silex but with a more verbose syntax.\r\n\r\n### Default Parameters\r\n\r\nThe two contructor arguments `$rootDir` and `$debug` are also registered on the application as parameters. This makes it easier \r\nfor services to add paths for caching, logs or other directories.\r\n\r\n``` php\r\n<?php\r\n\r\n// .. create $app\r\n$app->inject(array(\r\n    'twig.path' => $app['root_dir'] . '/views',\r\n));\r\n```\r\n\r\n### Custom Error Pages\r\n\r\nWhen finished a project or application it is the small things that matter the most. Such as having a custom error page instead of the one\r\nSilex provides by default. Also it can help a lost user navigate back. Flint makes this possible by using the exception handler from Symfony \r\nand a dedicated controller. Both the views and the controller can be overrriden.\r\n\r\nThis will only work when debug is turned off.\r\n\r\nTo override the error pages the same logic is used as inside Symfony.\r\nThe logic is very well described [in their documentation](http://symfony.com/doc/master/cookbook/controller/error_pages.html).\r\n\r\nOnly difference from Symfony is the templates must be created inside `views/Excetion/` directory. Inside the templates there is\r\naccess to `app` which in turns gives you access to all of the services defined. \r\n\r\nTo override the controller used by the exception handler change the `exception_controller` parameter. This parameter will by default\r\nbe set to `Flint\\\\Controller\\\\ExceptionController::showAction`.\r\n\r\n``` php\r\n<?php\r\n\r\n// .. create $app\r\n$app->inject(array(\r\n    'exception_controller' => 'Acme\\\\Controller\\\\ExceptionController::showAction',\r\n));\r\n```\r\n\r\nTo see what parameter the controller action takes look at the one provided by default. Normally it should not be overwritten as it already\r\ngives a lot of flexibilty with the template lookup.\r\n\r\n### Injecting Configuration Parameters\r\n\r\nSome times it is more useful to inject an array of parameters instead of setting them on the application one-by-one. Flint have a method that \r\ndoes this. It does the same thing as the second parameter of Silex `register` method.\r\n\r\n``` php\r\n<?php\r\n\r\n// .. $app\r\n$app->inject(array(\r\n    'twig.paths' => '/my/path/to/views',\r\n));\r\n```\r\n\r\nFeedback\r\n--------\r\n\r\nPlease provide feedback on everything (code, structure, idea etc) over twitter or email.\r\n\r\nWho\r\n---\r\n\r\nBuild by [@henrikbjorn](http://twitter.com/henrikbjorn) at [Peytz & Co](http://peytz.dk). With the help of [other contributors](https://github.com/henrikbjorn/flint/graphs/contributors).\r\n"}